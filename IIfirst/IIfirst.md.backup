### Нейронная сеть для arduino 

Первая проба в практическом изучении ИИ сделана на основе статьи от 2012 года ***Нейронная сеть для arduino*** - ***(http://robotics.hobbizine.com/arduinoann.html)***. Далее представлены основополагающие выдержки из неё в моём вольном переводе вместе с Яндексом от 2023-12-02:
 
*[В этой статье](http://robotics.hobbizine.com/arduinoann.html) представлена искусственная нейронная сеть, разработанная для платы микроконтроллера Arduino Uno. Описанная здесь сеть представляет собой* ***сеть обратного распространения с прямой связью***, *которая, пожалуй, является наиболее распространенным типом. Считается хорошей сетью общего назначения как для контролируемого, так и для неконтролируемого обучения.*
 
*Код для проекта предоставляется в виде эскиза Arduino. Это подключи и играй - вы можете загрузить его в Uno и запустить, и там есть раздел информации о конфигурации, который можно использовать для быстрого построения и обучения настроенной сети. Представленная здесь статья дает обзор искусственных нейронных сетей, детали эскиза и введение в некоторые базовые концепции, используемые в сетях прямой связи и алгоритме обратного распространения.*

***Нейронные сети с обратным распространением*** *используются с середины 1980-х годов. Основные концепции обратного распространения довольно просты, и хотя сам алгоритм включает в себя некоторую математику более высокого порядка, нет необходимости полностью понимать, как были выведены уравнения, чтобы применять их. При реализации сети в очень маленькой системе возникают некоторые проблемы, и на более ранних поколениях недорогих микроконтроллеров и плат для любителей эти проблемы были значительными.*

*Однако микропроцессор Arduino, как и многие современные платы, на самом деле справляется с этой задачей довольно быстро. Используемый здесь Arduino Uno основан на микроконтроллере ATmega328 от Atmel. 2 Кб SRAM достаточно для примерной сети с 7 входами и 4 выходами, а благодаря поддержке языка GCC Arduino для многомерных массивов и математики с плавающей запятой, работа по программированию становится очень управляемой.*

*Итак, для чего это полезно? Нейронные сети учатся на примере. Они используются в самых разных приложениях - от автономного управления транспортными средствами до игр, распознавания лиц и анализа фондового рынка. Большинство приложений будут включать в себя некоторый тип сопоставления с образцом, когда точный ввод в систему неизвестен. Например, распознавание рукописных символов. Общие формы алфавита могут быть известны заранее, но фактический ввод всегда будет разный. Конечно, небольшая сеть, построенная здесь на ATmega328, не вполне справится с задачей распознавания лиц, но есть немало экспериментов в области управления роботами и машинного обучения, которые были бы ей по силам.*

*Как следует из названия, искусственная нейронная сеть, часто сокращаемая ANN, представляет собой вычислительную модель, вдохновленную природой. Это попытка имитировать на определенном уровне то, как мозг хранит информацию и реагирует на различные входные данные. В природе основным строительным блоком нервной системы является специализированный тип клеток, называемый нейроном.*

![Нейрон](neuron.jpg)

*Возможно, было бы удобно визуализировать нейрон в виде крошечного электрохимического переключателя, который включается при стимуляции. Нейроны связаны друг с другом в обширные сети. Когда нейрон возбуждается стимулом и становится активным, он посылает небольшой заряд по этой сети, который, в свою очередь, заставляет другие нейроны в сети становиться активными. Нейрон будет иметь несколько нейронов, питающихся от него, и сила этих связей будет варьироваться. Если есть сильная связь с входными данными, это обеспечит много стимулов; более слабая связь обеспечит меньше. В самом реальном смысле о нейроне можно думать как о суммировании всех этих входных данных различной силы и получении результата, основанного на общей сумме.*

*В искусственной нейронной сети, основанной на программном обеспечении, нейроны и их связи строятся в виде математических соотношений. Когда программному обеспечению предоставляется шаблон ввода, оно передает этот шаблон через сеть, систематически суммируя входные данные для каждого нейрона, вычисляя выходные данные для этого нейрона и используя эти выходные данные для передачи соответствующих входных данных другим нейронам в сети.*

*Определение силы связей между нейронами, также известных как веса, становится основной задачей в применении нейронной сети. В алгоритме обратного распространения сеть изначально инициализируется случайными весами. Затем сети предоставляется обучающий набор входов и выходов. По мере того, как входные данные передаются через систему, фактический результат сравнивается с желаемым результатом и вычисляется ошибка. Затем эта ошибка передается обратно по сети, и веса корректируются постепенно в соответствии с алгоритмом обучения. В течение многих циклов, обычно тысяч, сеть в конечном итоге будет обучена и выдаст правильный результат при представлении входных данных.*

*В сети прямой связи, которую мы здесь создаем, нейроны расположены в трех слоях, называемых входным, скрытым и выходным слоями. Все нейроны в одном слое связаны со всеми нейронами в следующем слое. Классическое графическое представление этой взаимосвязи показано ниже.*

![Трехслойная нейронная сеть](trehslojnaya-nejronnaya-set.jpg)

*Скрытый слой играет решающую роль в сети прямой связи. В ранних моделях нейронных сетей входные нейроны были подключены непосредственно к выходным нейронам, и диапазон решений, которые могла бы выполнить сеть, был чрезвычайно ограничен. Одной из таких проблем, которую не смогла решить двухуровневая модель, была логика исключающего или - обычно представляемая как X ИЛИ. В булевской логике отношение XOR - это такое отношение, которое приводит к true, когда любой из входных данных равен true, но когда оба входных данных равны true, приводит к false.*

![Таблица истинности для XOR]( tablica-istinnosti-dlya-xor.jpg)

*С добавлением слоя между входами и выходами сеть способна находить решение для X ИЛИ и многое другое. Некоторые теории утверждают, что при других оптимизируемых условиях сети трехуровневая сеть была бы способна решать любую таблицу истинности. Решение для XOR - хорошая лакмусовая бумажка для новой сети. Вы увидите, что она часто используется в примерах, и ее часто называют программой нейронных сетей "Hello World".*

*Сеть, реализованная в эскизе, прилагаемом к этой статье, является всего лишь демонстрацией и на самом деле не выполняет никаких реальных функций. Эскиз включает набор обучающих входов и выходов, и сеть обучается этому набору до тех пор, пока не достигнет заранее определенного уровня точности. В этот момент скетч объявляет о победе и затем перезапускается. Попутно результаты обучения периодически отправляются на последовательный порт, который отслеживается с помощью последовательного монитора Arduino IDE.*

*Раздел конфигурации включает в себя два массива данных, входной и целевой, которые вместе составляют таблицу истинности обучающего набора. Как бы то ни было, обучающий набор в эскизе представляет собой таблицу истинности, которая преобразует семь сегментов светодиодного цифрового дисплея (0-9) в двоичное число (0000 - 1001).*
 
![Таблица истинности сегментов цифрового дисплея](tablica-istinnosti-segmentov-cifrovogo-displeya.jpg)

*Для перевода сети на новый обучающий набор, требуется ввести соответствующие значения таблицы истинности во входном и целевом массивах, а также настроить соответствующие параметры конфигурации в соответствии с таблицей истинности:* 

```
• Количество шаблонов - количество обучающих элементов или строк в таблице истинности. 
• Входные узлы - количество входных нейронов. 
• Скрытые узлы - количество скрытых нейронов. 
• Выходные узлы - количество выходных нейронов.
• Скорость обучения - параметр, который определяет, какая часть ошибки фактически передается обратно. 
• Импульс - регулирует, насколько результаты предыдущей итерации влияют на текущую итерацию. 
• Начальный максимальный вес - устанавливает максимальные начальные значения для весов. 
• Успех - порог ошибки, при котором будет считаться, что сеть решила обучающий набор.
```

*В нашей демонстрации скорость обучения установлена на уровне .3. Для больших, очень сложных сетей (намного больше, чем мы могли бы построить на Arduino Uno) значение часто устанавливается очень низким - порядка .01. Более низкое значение скорости обучения приводит к замедлению процесса обучения, но снижает вероятность того, что сеть начнет колебаться, будет выходит за рамки решения задачи обучения и никогда не достигает порога успеха.* 

*Импульс сглаживает процесс обучения, добавляя часть предыдущего обратного распространения в текущее обратное распространение. Он помогает предотвратить явление, при котором сеть сходится к решению, которое является хорошим, но не лучшим, также известное как сходимость к локальному минимуму. Значения импульса должны быть в диапазоне от 0 до 1.*

*Количество скрытых нейронов может влиять на скорость, с которой сеть может быть обучена, сложность задач, которые сеть может решать, и может помочь предотвратить сходимость к локальному минимуму. Вы захотите иметь по крайней мере столько же скрытых нейронов, сколько выходных нейронов, а возможно, и значительно больше. Недостатком большого количества скрытых нейронов является большое количество весов, которые необходимо сохранить.*

*Начальные рандомизированные веса должны быть относительно небольшими. Значение для начального максимального веса в конфигурации, прилагаемой к эскизу, равно .5. Это установит все начальные веса в диапазоне от -.5 до .5, что является хорошей отправной точкой.*

*Идеальные значения этих параметров сильно варьируются в зависимости от данных обучения, и на самом деле не существует простой наилучшей практики для их выбора; подходом, по-видимому, является опыт в сочетании с методом проб и ошибок.*

*Успех - конечное значение порогового уровня ошибки в системе, при котором обучающий набор будет считаться выученным. Это очень небольшое число, большее нуля. Природа сетей такого типа такова, что общая ошибка в системе будет приближаться к нулю, но на самом деле никогда не достигнет его.*

*Логике программирования нейронной сети включает три фундаментальных операции с сетью: активация, коррекция градиента и смещение.*

*Функция активации вычисляет выходные данные нейрона на основе суммы взвешенных соединений, поступающих в этот нейрон. В данном материале используется наиболее распространенная функция активации, которая называется сигмовидной функцией из-за ее отличительной формы.*

![Сигмовидная функция](sigmovidnaya-funkciya.jpg)












