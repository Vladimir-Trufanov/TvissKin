### Проекты Интернета вещей с Arduino Nano 33 BLE Sense - Агус Курниаван

Знакомство с книгой Агуса Курниавана "Проекты Интернета вещей с Arduino Nano 33 BLE Sense" и программирование примеров из неё. 

![Распиновка платы Arduino Nano 33 BLE Sense](raspinovka-platy-arduino-nano-33-ble-sense.jpg)

Расположение выводов Arduino Nano 33 BLE Sense отображается на задней стороне платы. Пины цифрового ввода / вывода определяются как Dx, где x - цифровое число; например, D1 - это цифровой ввод / вывод на выводе 1.

### Проекты
#### [ButtonLed -  цифровой ввод-вывод](#buttonled)
#### [ClearEEPROM - очистка энергонезависимой памяти контроллера](#cleareeprom)
#### [MemoryGuide - руководство по памяти Arduino](MemoryGuide/MemoryGuide.md) 
#### [AnalogSensor - Аналоговый ввод / вывод](#analogsensor)

---

#### ButtonLed
#### Цифровой ввод-вывод

Чтобы реализовать демонстрацию цифрового ввода-вывода на Arduino Nano 33 BLE Sense, нам понадобится светодиод и кнопка. Для этих примеров используйте внутренний светодиод (встроенный светодиод) на цифровом контакте 13. Нам также понадобится кнопка, подключенная к цифровому контакту 7. 

![](raspinovka2.jpg)

![Конфигурация соединений для проекта кнопки](ButtonLed/konfiguraciya-soedinenij-dlya-proekta-knopki.jpg)

![Включение лампочки на Arduino Uno](ButtonLed/vklyuchenie-lampochki-na-arduino-uno.jpg)

###### [к списку проектов](#%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D1%8B)

---

#### ClearEEPROM
#### Очистка энергонезависимой памяти контроллера

EEPROM (англ. Electrically Erasable Programmable Read-Only Memory) — электрически стираемое перепрограммируемое ПЗУ.

В общем, после нескольких загрузок при очередной загрузке скетча (Arduino 1.8.18) вышло сообщение, что места маловато и могут быть сбои при работе программы (Arduino 2.2.1 такого сообщения не выдавало), решил занятся вопросом.

***[Как сбросить память Arduino - https://citavers.ru/2023/10/25/kak-sbrosit-pamyat-arduino](https://citavers.ru/2023/10/25/kak-sbrosit-pamyat-arduino)***

Для различных моделей Arduino могут быть разные объёмы памяти и разные методы очистки памяти. В этой статье мы сосредоточимся на общих методах, которые будут полезны для большинства моделей Arduino.

Существует несколько способов очистки памяти на Arduino:

1. Очистка переменных.	Путем присвоения переменным новых значений или применения функции memset() можно очистить содержимое переменных и освободить занимаемую ими память.

2. Очистка массивов.	Для очистки массивов следует применить цикл и установить все элементы массива в значение по умолчанию или пустой символ.

3. Очистка объектов.	Путем вызова деструктора объекта или освобождения ресурсов, связанных с объектом, можно очистить память, занимаемую объектом.

4. Очистка сборщиком мусора. 	Arduino имеет встроенный сборщик мусора, который автоматически очищает память от неиспользуемых объектов. Однако иногда может потребоваться вызвать сборщик мусора вручную для более эффективной очистки памяти.

Регулярная очистка памяти позволяет оптимизировать использование ресурсов Arduino и создавать более надежные и эффективные проекты.

Полная заполненность памяти на Arduino может привести к физическим повреждениям памяти, таким как неправильная запись или чтение данных. В итоге, устройство может перестать работать или испытывать серьезные ошибки в выполнении программ.

```
Шаги по очистке памяти на Arduino

Шаг 1: Подключите Arduino к компьютеру с помощью USB-кабеля и запустите Arduino IDE.

Шаг 2: Откройте скетч, который вы хотите загрузить на Arduino.

Шаг 3: Нажмите на кнопку «Загрузить» в верхней части окна Arduino IDE.

Шаг 4: После того, как скетч загрузится на Arduino, нажмите на кнопку «Серийный монитор» в верхней части окна Arduino IDE.

Шаг 5: В окне серийного монитора нажмите на кнопку «Отправка переноса строки» внизу окна.

Шаг 6: Введите команду «AT+EEPROMERASE» в поле ввода команд и нажмите на кнопку «Отправить».

Шаг 7: Подождите несколько секунд, пока процесс очистки EEPROM-памяти Arduino завершится.

Шаг 8: При успешной очистке памяти, вы увидите сообщение «EEPROM has been erased» в окне серийного монитора.

Шаг 9: Теперь вы можете загрузить новый скетч на Arduino, и память будет полностью очищена.
```

***Обратите внимание, что очистка памяти EEPROM на Arduino удаляет все данные, хранящиеся в памяти. Поэтому перед выполнением этой операции убедитесь, что у вас есть резервные копии всех важных данных.***

```
Дополнительные советы по очистке памяти

1. Используйте флаги и флаговые биты: Вместо использования целых переменных для хранения логических значений, можно использовать битовые флаги, которые занимают намного меньше памяти. Например, вместо хранения состояния ON/OFF в отдельной переменной можно использовать только один бит.

2. Оптимизируйте использование массивов: Если вам необходимо хранить большое количество данных, попробуйте оптимизировать использование массивов. Например, вместо использования массива типа int можно использовать массив типа byte, если ваши значения не превышают диапазон от 0 до 255.

3. Освобождайте динамическую память: Если вы используете динамическую память с помощью функций malloc() и free(), убедитесь, что вы освобождаете все выделенные ресурсы после их использования. Это поможет избежать утечки памяти.

4. Оптимизируйте использование библиотек: Если вы используете сторонние библиотеки, проверьте, нет ли в них избыточных или неиспользуемых функций. Удалите неиспользуемые части библиотеки, чтобы уменьшить занимаемое ею место в памяти.

5. Удалите отладочный код: Если вы закончили разработку и отладку программы, удалите все отладочные выражения, которые могут занимать дополнительное место в памяти. Оставьте только необходимый код для работы вашей программы.

Следование этим советам поможет вам оптимизировать использование памяти на Arduino и сделать вашу программу более эффективной.
```

После проведения процедуры очистки памяти на устройстве Arduino, рекомендуется проверить эффективность выполненных действий. Это позволит убедиться, что ненужные данные и фрагменты кода были успешно удалены, и память устройства теперь используется оптимально.

Для проверки эффективности очистки памяти можно воспользоваться кодом ***[ClearEEPROM](ClearEEPROM/ClearEEPROM.ino)***, основанным на функциях, измеряющих объем свободной памяти до и после процедуры очистки.

###### [к списку проектов](#%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D1%8B)

---

#### AnalogSensor
#### Аналоговый ввод / вывод

##### [Подключение датчика DHT11 к Arduino UNO и вывод показаний температуры и влажности на LCD 1602 I2C дисплей](#dht11)

Arduino Nano 33 BLE Sense обеспечивает аналоговый ввод-вывод, чтобы
мы могли взаимодействовать с сенсорными и исполнительными
устройствами. Аналоговые выводы ввода / вывода помечены как Ax, где x 
- номер аналогового вывода. Вы можете увидеть эти ярлыки на задней
панели платы Arduino Nano 33 BLE Sense.

 Arduino Nano 33 BLE Sense имеет восемь аналоговых входов (АЦП).
 К сожалению, Arduino Nano 33 BLE Sense не поддерживает аналоговый
выход (ЦАП), но мы можем использовать ШИМ как аналоговый выход. 
Для моделирования АЦП Arduino Nano 33 BLE Sense обеспечивает
разрешение АЦП с 12 битами.

#### Dht11
#### [Подключение датчика DHT11 к Arduino UNO и вывод показаний температуры и влажности на LCD 1602 I2C дисплей](https://lesson.iarduino.ru/page/podklyuchenie-datchika-dht11-k-arduino-uno-vyvodim-temperaturu-i-vlazhnost-na-lcd-1602-i2c-displey)


e

e

e

e

e

e

e


e

e

e

e

e

e

e


e

e

e

e

e

e

e




###### [к списку проектов](#%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D1%8B)

---


