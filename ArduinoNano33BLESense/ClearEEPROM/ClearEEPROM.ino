/* ========================================================================= */
/*                                                                           */
/*   ClearEEPROM.ino                                                         */
/*   (c) 2023-12-13 Труфанов Владимир                                        */
/*                                                                           */
/*   Description: Проверка эффективности очистки памяти
     Источник: https://citavers.ru/2023/10/25/kak-sbrosit-pamyat-arduino
     
Шаги по очистке памяти на Arduino
Шаг 1: Подключите Arduino к компьютеру с помощью USB-кабеля и запустите Arduino IDE.

Шаг 2: Откройте скетч, который вы хотите загрузить на Arduino.

Шаг 3: Нажмите на кнопку «Загрузить» в верхней части окна Arduino IDE.

Шаг 4: После того, как скетч загрузится на Arduino, нажмите на кнопку «Серийный монитор» в верхней части окна Arduino IDE.

Шаг 5: В окне серийного монитора нажмите на кнопку «Отправка переноса строки» внизу окна.

Шаг 6: Введите команду «AT+EEPROMERASE» в поле ввода команд и нажмите на кнопку «Отправить».

Шаг 7: Подождите несколько секунд, пока процесс очистки EEPROM-памяти Arduino завершится.

Шаг 8: При успешной очистке памяти, вы увидите сообщение «EEPROM has been erased» в окне серийного монитора.

Шаг 9: Теперь вы можете загрузить новый скетч на Arduino, и память будет полностью очищена.

*/
/* ========================================================================= */

// После проведения процедуры очистки памяти на устройстве Arduino, 
// рекомендуется проверить эффективность выполненных действий. Это позволит 
// убедиться, что ненужные данные и фрагменты кода были успешно удалены, и 
// память устройства теперь используется оптимально.

extern "C" 
{
   extern unsigned int __heap_start;
   extern void *__brkval;
   extern int __bss_end;
}

void setup() 
{
   // Измеряем объем свободной памяти до очистки
   int freeMemoryBefore = getFreeMemory();
   
   // *************************************************************************
   // Здесь выполняется процедура очистки памяти
   // *************************************************************************
   
   // Измеряем объем свободной памяти после очистки
   int freeMemoryAfter = getFreeMemory();
   // Вычисляем объем освобожденной памяти
   int freedMemory = freeMemoryBefore - freeMemoryAfter;
   
   Serial.begin(9600);
   Serial.print("Свободная память до очистки: ");
   Serial.println(freeMemoryBefore);
   Serial.print("Свободная память после очистки: ");
   Serial.println(freeMemoryAfter);
   Serial.print("Освобождено памяти: ");
   Serial.println(freedMemory);
}
void loop() 
{
   // пустой цикл
}

int getFreeMemory() 
{
   int freeMemory;
   if ((int)__brkval == 0) 
   {
      freeMemory = ((int)&freeMemory) - ((int)&__heap_start);
   } 
   else 
   {
      freeMemory = ((int)&freeMemory) - ((int)__brkval);
      freeMemory += __bss_end - (int)&__heap_start;
   }
   return freeMemory;
}

// Необходимо отметить, что данная процедура не является идеальным способом 
// измерения использования памяти, но может служить хорошим ориентиром для 
// определения, насколько успешна была очистка памяти.

// Проверка эффективности очистки памяти на Arduino поможет оптимизировать 
// работу устройства и избежать проблем, связанных с недостаточным объемом 
// доступной памяти.
